{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","defaultProps","App","state","errorMessage","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","console","log","src_SeasonDisplay_0","src_Spinner","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAGMA,SAAe,CACjBC,OAAQ,CACJC,KAAM,kCACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,kCACNC,SAAU,eAyBHE,EAbO,SAACC,GACnB,IAVeC,EAAKC,EAUdC,GAVSF,EAUUD,EAAMC,KAVXC,GAUgB,IAAIE,MAAOC,YATnC,GAAKH,EAAQ,EACfD,EAAM,EAAI,SAAW,SAGpBA,EAAM,EAAI,SAAW,UAIHK,EAEFZ,EAAaS,GAAhCP,EAFqBU,EAErBV,KAAMC,EAFeS,EAEfT,SAEd,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAC9BI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBd,EAAvB,WACXU,EAAAC,EAAAC,cAAA,UAAMb,GACPW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,aC5BlBe,EAAU,SAACZ,GACb,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACVV,EAAMa,WAOvBD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCXTG,6MAEFC,MAAQ,CAAEf,IAAK,KAAMgB,aAAc,uFAEhB,IAAAC,EAAAC,KACfC,OAAOC,UAAUC,YAAYC,mBACzB,SAACC,GAAD,OAAcN,EAAKO,SAAS,CAAExB,IAAKuB,EAASE,OAAOC,YACnD,SAACC,GAAD,OAASV,EAAKO,SAAS,CAAER,aAAcW,EAAIf,yDAI/CgB,QAAQC,IAAI,qEAIZ,OAAIX,KAAKH,MAAMC,eAAiBE,KAAKH,MAAMf,IAEnCM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAf,UAEaS,KAAKH,MAAMC,eAI3BE,KAAKH,MAAMC,cAAgBE,KAAKH,MAAMf,IAEnCM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACVH,EAAAC,EAAAC,cAACsB,EAAD,CAAe9B,IAAKkB,KAAKH,MAAMf,OAKrCM,EAAAC,EAAAC,cAACuB,EAAD,CAASnB,QAAQ,oEAKxB,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVS,KAAKc,wBAtCJC,IAAMC,WA8CxBC,IAASC,OACL9B,EAAAC,EAAAC,cAAC6B,EAAD,MACAC,SAASC,cAAc","file":"static/js/main.fa54274c.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    summer: {\n        text: \"Its summer lets go to the beach\",\n        iconName: 'sun'\n    },\n    winter: {\n        text: \"oh, its winter here, too chilly\",\n        iconName: 'snowflake'\n    }\n};\nconst getSeason = (lat, month) => {\n    if (month > 2 && month < 9){\n       return lat > 0 ? 'summer' : 'winter';\n    }\n    else {\n        return lat > 0 ? 'winter' : 'summer';\n    }\n}\n\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season]\n    \n    return (\n        <div className={`season-display ${season}`}>   \n            <i className={`icon-left massive ${iconName} icon`} />\n             <h1>{ text }</h1>      \n            <i className={`icon-right massive ${iconName} icon`} />                        \n        </div>\n    );\n}\n\nexport default SeasonDisplay;","import React from 'react';\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">\n                {props.message}\n            </div>\n        </div>\n    );\n};\n\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n};\n\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n \n\nclass App extends React.Component {\n\n    state = { lat: null, errorMessage: '' };\n\n    componentDidMount(){\n        window.navigator.geolocation.getCurrentPosition(\n            (position) => this.setState({ lat: position.coords.latitude }),\n            (err) => this.setState({ errorMessage: err.message })            \n        )\n    }\n    componentDidUpdate(){\n        console.log('component did update call');\n    }\n\n    renderContent(){\n        if (this.state.errorMessage && !this.state.lat){\n            return (\n                <div className=\"ui container comments\">          \n                     \n                     Error: {this.state.errorMessage}                        \n                </div>\n            )\n        }\n        if (!this.state.errorMessage && this.state.lat){\n            return (\n                <div className=\"ui container comments\">          \n                     <SeasonDisplay lat={this.state.lat} />\n                 </div>\n            )\n        } \n\n        return <Spinner message=\"Please accept location request\" />;\n    }\n\n    render(){\n       \n        return (\n            <div className=\"border red\">\n                {this.renderContent()}\n            </div>\n        )\n        \n    }\n}\n\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n)"],"sourceRoot":""}